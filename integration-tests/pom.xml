<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.squashtest.tm</groupId>
    <artifactId>squash-tm</artifactId>
    <version>1.18.0.RC5-SNAPSHOT</version>
  </parent>

  <artifactId>squashtest-integration-tests</artifactId>
  <name>squash-tm-integration-tests</name>

  <description>Library of Squash TM integration tests. This module is not supposed to be part of the main build i.e. you have to
    run it explicitely</description>

  <properties>
    <database.changelog>../database/src/main/liquibase/global.changelog-master.xml</database.changelog>
    <database.dialect>h2</database.dialect>
    <database.drivername>org.h2.Driver</database.drivername>
    <database.password>sa</database.password>
    <database.schemaName>public</database.schemaName>
    <database.typefactory>org.dbunit.ext.h2.H2DataTypeFactory</database.typefactory>
    <database.username>sa</database.username>
    <!-- On Jenkins server these relative paths are not interpreted in the same way by liquibase and the datasource. These
      props should be overridden with absolute paths (which don't work under windows...) -->
    <dbunit-database.url>jdbc:h2:${project.build.directory}/database/squash-it-dbunit/squash-it</dbunit-database.url>
    <hibernate.dialect>org.squashtest.tm.domain.jpql.H2EnhancedDialect</hibernate.dialect>

    <hibernate.new_generator_mappings>false</hibernate.new_generator_mappings>
    <hibernate.sql.formatted>false</hibernate.sql.formatted>

    <hibernate.sql.verbosity>INFO</hibernate.sql.verbosity>
    <jooq.sql.dialect>H2</jooq.sql.dialect>

    <skipITs>false</skipITs>
    <squashtest.rootDir>${project.build.directory}</squashtest.rootDir>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>squash-tm-bom</artifactId>
        <version>${project.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>

    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>

    </dependency>

    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.squashtest.tm</groupId>
      <artifactId>core.aspect</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>core.testautomation.api</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.squashtest.tm</groupId>
      <artifactId>database.h2.fragment</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>org.squashtest.tm.tools.unittest</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.spockframework</groupId>
      <artifactId>spock-spring</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>spock-test-dependencies</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-expression</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- ====== /HIBERNATE SUPPORT ====== -->

    <!-- ====== SQUASHTEST ====== -->
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>tm.domain</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>tm.service</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- ====== /SPOCK-SPRING-TEST BRIDGE ====== -->

  </dependencies>

  <build>
    <testSourceDirectory>src/it/groovy</testSourceDirectory>

    <testResources>
      <testResource>
        <filtering>true</filtering>
        <directory>src/it/resources</directory>
        <excludes>
          <exclude>**/*.xls</exclude>
          <exclude>**/*.xlsx</exclude>
          <exclude>**/*.zip</exclude>
        </excludes>
      </testResource>
      <testResource>
        <filtering>false</filtering>
        <directory>src/it/resources</directory>
        <includes>
          <include>**/*.xls</include>
          <include>**/*.xlsx</include>
          <include>**/*.zip</include>
        </includes>
      </testResource>
    </testResources>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireProperty>
                  <property>dbunit-database.url</property>
                </requireProperty>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>testCompile</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <compilerId>groovy-eclipse-compiler</compilerId>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-filtering</artifactId>
            <version>1.3</version>
          </dependency>
        </dependencies>

        <executions>
          <execution>
            <goals>
              <goal>testResources</goal>
            </goals>
            <phase>pre-integration-test</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <!-- Adds more source directories to the pom -->
          <execution>
            <id>add-integration-test-source</id>
            <goals>
              <goal>add-source</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <sources>
                <source>src/it/groovy</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!--  disabling surefire inherited from parent, because it should not run tests :
      		that's the job of maven-failsafe-plugin
      	 -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <executions>
          <execution>
            <id>default-test</id>
            <phase>none</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <!-- <threadCount>1</threadCount> -->
          <!--
          <argLine>-Xmx1024m -XX:PermSize=256m -agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=y</argLine>-->

          <argLine>-Xmx1024m -XX:PermSize=256m</argLine>

          <!-- We can run ITs and skip unit tests with -DskipTests=true -->
          <skipTests>${skipITs}</skipTests>
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.squashtest.tm</groupId>
            <artifactId>core.aspect</artifactId>
            <version>${project.version}</version>
          </dependency>
          <dependency>
            <groupId>org.squashtest.tm</groupId>
            <artifactId>database.h2.fragment</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>

        <executions>
          <execution>
            <id>integration-tests</id>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <phase>integration-test</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>sonar</id>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-failsafe-plugin</artifactId>
              <configuration>
                <argLine>-javaagent:${jacoco.agent.path}=destfile=${jacoco.file.path}</argLine>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <id>h2.windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>

      <properties>
        <!-- On Jenkins server these relative paths are not interpreted in the same way by liquibase and the datasource. These
      props should be overridden with absolute paths (which don't work under windows...) -->
        <dbunit-database.url>jdbc:h2:./target/database/squash-it-dbunit/squash-it</dbunit-database.url>
      </properties>
    </profile>

    <profile>
      <id>h2.unix</id>
      <activation>
        <os>
          <family>!windows</family>
        </os>
      </activation>

      <properties>
        <!-- On Jenkins server these relative paths are not interpreted in the same way by liquibase and the datasource. These
      props should be overridden with absolute paths (which don't work under windows...) -->
        <dbunit-database.url>jdbc:h2:${project.basedir}/target/database/squash-it-dbunit</dbunit-database.url>
      </properties>
    </profile>

    <profile>
      <id>mysql</id>
      <properties>
        <database.dialect>mysql</database.dialect>
        <database.drivername>com.mysql.jdbc.Driver</database.drivername>
        <database.password>${it.database.password}</database.password>
        <database.schemaName>${it.database.schemaName}</database.schemaName>
        <database.typefactory>org.dbunit.ext.mysql.MySqlDataTypeFactory</database.typefactory>
        <database.username>${it.database.username}</database.username>
        <dbunit-database.url>${it.database.url}</dbunit-database.url>
        <hibernate.dialect>org.squashtest.tm.domain.jpql.MySQLEnhancedDialect</hibernate.dialect>
        <hibernate.new_generator_mappings>false</hibernate.new_generator_mappings>
        <jooq.sql.dialect>MYSQL</jooq.sql.dialect>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireProperty>
                      <property>it.database.url</property>
                    </requireProperty>
                    <requireProperty>
                      <property>it.legacy.database.url</property>
                    </requireProperty>
                    <requireProperty>
                      <property>it.database.schemaName</property>
                    </requireProperty>
                    <requireProperty>
                      <property>it.database.username</property>
                    </requireProperty>
                    <requireProperty>
                      <property>it.database.password</property>
                    </requireProperty>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>postgresql</id>
      <properties>
        <database.dialect>postgresql</database.dialect>
        <database.drivername>org.postgresql.Driver</database.drivername>
        <database.password>${it.database.password}</database.password>
        <database.schemaName>public</database.schemaName>
        <database.typefactory>org.dbunit.ext.postgresql.PostgresqlDataTypeFactory</database.typefactory>
        <database.username>${it.database.username}</database.username>
        <dbunit-database.url>${it.database.url}</dbunit-database.url>
        <hibernate.dialect>org.squashtest.tm.domain.jpql.PostgresEnhancedDialect</hibernate.dialect>
        <hibernate.new_generator_mappings>true</hibernate.new_generator_mappings>
        <jooq.sql.dialect>POSTGRES</jooq.sql.dialect>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireProperty>
                      <property>it.database.url</property>
                    </requireProperty>
                    <requireProperty>
                      <property>it.legacy.database.url</property>
                    </requireProperty>
                    <requireProperty>
                      <property>it.database.username</property>
                    </requireProperty>
                    <requireProperty>
                      <property>it.database.password</property>
                    </requireProperty>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>create-database</id>
      <activation>
        <property>
          <name>!database.nocreate</name>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- Create and populate a database integration tests -->
          <!--<plugin>-->
          <!--<groupId>org.codehaus.mojo</groupId>-->
          <!--<artifactId>aspectj-maven-plugin</artifactId>-->
          <!--<configuration>-->
          <!--<showWeaveInfo>${verbose.compiler}</showWeaveInfo>-->
          <!--<source>${java.version}</source>-->
          <!--<target>${java.version}</target>-->
          <!--<complianceLevel>${java.version}</complianceLevel>-->
          <!--<aspectLibraries>-->
          <!--<aspectLibrary>-->
          <!--&lt;!&ndash; For @Configurable. Not sure we need it in this module &ndash;&gt;-->
          <!--<groupId>org.springframework</groupId>-->
          <!--<artifactId>org.springframework.aspects</artifactId>-->
          <!--</aspectLibrary>-->
          <!--</aspectLibraries>-->
          <!--</configuration>-->
          <!--</plugin>-->

          <plugin>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>create-dbunit-database</id>
                <goals>
                  <goal>update</goal>
                </goals>
                <phase>generate-test-resources</phase>
                <configuration>
                  <dropFirst>true</dropFirst>
                  <clearCheckSums>true</clearCheckSums>
                  <changeLogFile>${database.changelog}</changeLogFile>
                  <driver>${database.drivername}</driver>
                  <url>${dbunit-database.url}</url>
                  <username>${database.username}</username>
                  <password>${database.password}</password>
                </configuration>
              </execution>

            </executions>
          </plugin>
        </plugins>
      </build>

    </profile>

    <profile>
      <id>verbose</id>
      <properties>
        <hibernate.sql.formatted>true</hibernate.sql.formatted>
        <hibernate.sql.verbosity>DEBUG</hibernate.sql.verbosity>
      </properties>
    </profile>

    <profile>
      <id>code.analysis</id>
      <activation>
        <property>
          <name>code.analysis</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <configuration>
              <!-- The destination file for the code coverage report has to be set to the same value
                   in the parent pom and in each module pom. Then JaCoCo will add up information in
                   the same report, so that, it will give the cross-module code coverage. -->
              <destFile>${project.basedir}/../target/jacoco-it.exec</destFile>
            </configuration>
          </plugin>
        </plugins>

      </build>
    </profile>
  </profiles>
</project>
