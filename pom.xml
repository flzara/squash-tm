<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.squashtest.tm</groupId>
  <artifactId>squash-tm</artifactId>
  <version>1.22.0.IT24</version>
  <packaging>pom</packaging>

  <name>squash-tm</name>
  <description>Squash Test Manager - Test repository management application</description>

  <modules>
    <!-- bom is used almost everywhere, we build it early -->
    <module>bom</module>
    <!-- tools are used by the actual app, we build it early -->
    <module>tools</module>
    <module>database.h2.fragment</module>
    <module>database</module>
    <module>core</module>
    <module>tm</module>
    <module>plugins</module>
  </modules>

  <properties>
    <!-- aspectj version - should be syncd w/ spring boot version -->
    <!-- yet we're stuck at 1.8.5 - won't compile with newer versions -->
    <aspectj.version>1.8.5</aspectj.version>
    <!--
      Some modules require an alternate version of groovy eclipse batch, each for their
      own reasons (tm.service, integration-tests)
    -->
    <groovy-eclipse-batch.alternate.version>2.4.17-02</groovy-eclipse-batch.alternate.version>
    <groovy-eclipse-batch.version>2.4.3-01</groovy-eclipse-batch.version>
    <groovy-eclipse-compiler.version>3.3.0-01</groovy-eclipse-compiler.version>
    <!-- groovy version syncd w/ spring boot version -->
    <groovy.version>2.4.7</groovy.version>

    <jacoco-maven-plugin.version>0.8.4</jacoco-maven-plugin.version>

    <jasperreports.version>6.1.1</jasperreports.version>
    <java.version>1.8</java.version>

    <liquibase.version>2.0.1</liquibase.version>

    <maven-failsafe-plugin.version>2.18.1</maven-failsafe-plugin.version>
    <maven-surefire-plugin.version>2.18.1</maven-surefire-plugin.version>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <spring-boot-maven-plugin.version>2.1.6.RELEASE</spring-boot-maven-plugin.version>
    <spring.boot.version>2.1.6.RELEASE</spring.boot.version>

    <verbose.compiler>false</verbose.compiler>
    <wro4j.version>1.7.8</wro4j.version>
  </properties>
  <build>
    <!--
      This POM should only declare plugin mgt and plugins.
      It should not declare dependency mgt (they should be in squash-tm-bom)
      It should not declare dependencies
      If you need any of these plgins in a submodule, simply declare it in the plugins section without version. You
      probably don't need to reconfigure the plugin either.
    -->
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
          <configuration>
            <!-- Std java compiler plugin is configured to compile groovy using groovy-eclipse-compiler -->
            <source>${java.version}</source>
            <target>${java.version}</target>
            <compilerId>groovy-eclipse-compiler</compilerId>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.codehaus.groovy</groupId>
              <artifactId>groovy-eclipse-batch</artifactId>
              <version>${groovy-eclipse-batch.version}</version>
            </dependency>
            <dependency>
              <groupId>org.codehaus.groovy</groupId>
              <artifactId>groovy-eclipse-compiler</artifactId>
              <version>${groovy-eclipse-compiler.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>aspectj-maven-plugin</artifactId>
          <version>1.8</version>
          <configuration>
            <source>${java.version}</source>
            <target>${java.version}</target>
            <complianceLevel>${java.version}</complianceLevel>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.aspectj</groupId>
              <artifactId>aspectjtools</artifactId>
              <version>${aspectj.version}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <goals>
                <goal>compile</goal>
                <goal>test-compile</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <!-- Configures groovy sources location -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>1.11</version>
          <executions>
            <execution>
              <id>add-source</id>
              <goals>
                <goal>add-source</goal>
              </goals>
              <phase>generate-sources</phase>
              <configuration>
                <sources>
                  <source>src/main/groovy</source>
                </sources>
              </configuration>
            </execution>
            <execution>
              <id>add-test-source</id>
              <goals>
                <goal>add-test-source</goal>
              </goals>
              <phase>generate-test-sources</phase>
              <configuration>
                <sources>
                  <source>src/test/groovy</source>
                </sources>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <!-- Mostly the same as surefire, but used for integration tests -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${maven-failsafe-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
          <configuration>
            <systemProperties>
              <property>
                <name>log4j.configuration</name>
                <value>test-log4j.properties</value>
              </property>
            </systemProperties>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>2.7</version>
          <configuration>
            <nonFilteredFileExtensions>
              <nonFilteredFileExtension>ico</nonFilteredFileExtension>
              <nonFilteredFileExtension>zip</nonFilteredFileExtension>
            </nonFilteredFileExtensions>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.liquibase</groupId>
          <artifactId>liquibase-maven-plugin</artifactId>
          <version>${liquibase.version}</version>
          <configuration>
            <promptOnNonLocalDatabase>false</promptOnNonLocalDatabase>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.squashtest.tm</groupId>
              <artifactId>database.h2.fragment</artifactId>
              <version>${project.version}</version>
            </dependency>
            <dependency>
              <groupId>org.liquibase</groupId>
              <artifactId>liquibase-core</artifactId>
              <version>${liquibase.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>xml-maven-plugin</artifactId>
          <version>1.0</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>

        <plugin>
          <artifactId>maven-remote-resources-plugin</artifactId>
          <version>1.5</version>
        </plugin>

        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.6</version>
        </plugin>

        <plugin>
          <!-- wro4j processes some web assets such as less CSS -->
          <groupId>ro.isdc.wro4j</groupId>
          <artifactId>wro4j-maven-plugin</artifactId>
          <version>${wro4j.version}</version>
          <dependencies>
            <dependency>
              <groupId>ro.isdc.wro4j</groupId>
              <artifactId>wro4j-extensions</artifactId>
              <version>${wro4j.version}</version>
            </dependency>
            <dependency>
              <!-- without this, old 1.3 version may be pulled outta nowhere and reports wont compile -->
              <groupId>xml-apis</groupId>
              <artifactId>xml-apis</artifactId>
              <version>1.4.01</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <!--
            this plugin installs a node which can be used by requirejs maven plugin
            TODO assess : since frontend plugin also installs node maybe this one is no longer needed
          -->
          <groupId>com.github.skwakman.nodejs-maven-plugin</groupId>
          <artifactId>nodejs-maven-plugin</artifactId>
          <version>1.0.5-node-0.10.25</version>
          <configuration>
            <targetDirectory>${project.build.directory}/nodejs/</targetDirectory>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>extract</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>com.mysema.maven</groupId>
          <artifactId>apt-maven-plugin</artifactId>
          <version>1.1.3</version>
        </plugin>

        <plugin>
          <groupId>com.alexnederlof</groupId>
          <artifactId>jasperreports-plugin</artifactId>
          <version>1.9</version>
          <dependencies>
            <dependency>
              <!-- required to make sure jr runtime version is in sync with compile-time version -->
              <groupId>net.sf.jasperreports</groupId>
              <artifactId>jasperreports</artifactId>
              <version>${jasperreports.version}</version>
              <exclusions>
                <exclusion>
                  <!-- without this, old 1.3 version may be pulled outta nowhere and warious problems occur -->
                  <groupId>xml-apis</groupId>
                  <artifactId>xml-apis</artifactId>
                </exclusion>
              </exclusions>
            </dependency>
            <dependency>
              <!-- without this, old 1.3 version may be pulled outta nowhere and reports wont compile -->
              <groupId>xml-apis</groupId>
              <artifactId>xml-apis</artifactId>
              <version>1.4.01</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <goals>
                <goal>jasper</goal>
              </goals>
              <phase>process-sources</phase>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${spring-boot-maven-plugin.version}</version>
        </plugin>

        <plugin>
          <!-- This is used to run groovy scripts during the build (not to compile groovy sources, see maven-compiler-plugin) -->
          <groupId>org.codehaus.gmaven</groupId>
          <artifactId>gmaven-plugin</artifactId>
          <version>1.5</version>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>axistools-maven-plugin</artifactId>
          <version>1.4</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>1.4.1</version>
          <dependencies>
            <dependency>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>extra-enforcer-rules</artifactId>
              <version>1.0-beta-9</version>
            </dependency>
          </dependencies>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <!--
      		We don't want commons-logging, we want to bridge it to slf4j using
      		spring-jcl implementation (not jcl-over-slf4j).
      		So here we check that no commons-logging gets included by mistake.
      	  -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>ban-unwanted-stuffs</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>commons-logging:commons-logging</exclude>
                    <exclude>org.eclipse.jdt.core.compiler:ecj</exclude>
                  </excludes>
                </bannedDependencies>
                <banDuplicateClasses>
                  <findAllDuplicates>true</findAllDuplicates>
                  <!--
                  	Known harmless duplicates :

                  		1/ com.google.code.findbugs:jsr305 and com.google.code.findbugs:annotations.

                  		jsr305 should be removed in favor of annotations (a superset) unfortunately
                  		it is so ubiquitous that excluding it from every depending artifacts
                  		would be a pain. The weight of the involved jars are negligible and
                  		both can be shipped without significant memory penalty.


                  		2/ io.cucumber.gherkin (5.0.0) and io.cucumber.gherkin-jvm-deps.

                  		Gherkin already inlines every classes from the jvm-deps artifact,
                  		while still depending on it. However this might not be true for
                  		future versions of Gherkin (the pom for version 6.0.0 looks very
                  		different) so I prefer to let them live together. The weight of
                  		both jar is negligible here too (barely 250k of duplicate classes)


                  		3/ org.apache.tomcat.embed:tomcat-embed-core and javax.servlet:javax.servlet-api

                  		See https://github.com/spring-projects/spring-boot/issues/8943 for discussion.

                  		Ideally we should exclude spring-boot-starter-tomcat in tm.web and we could still compile
                  		(the customization of a Tomcat container only depend on Spring Boot core artifact),
                  		as long as the official javax.* apis are available.

                  		Tomcat embed core would be needed only at runtime, or not at all if deployed in
                  		an external Tomcat. But for this to happen we need it in the classpath. So we must
                  		live with the class conflict here untill a better option comes around.
                   -->
                  <ignoreWhenIdentical>true</ignoreWhenIdentical>
                  <ignoreClasses>
                    <!-- conflict in the mantis plugin but I suspect no severe consequences (it worked until now right ?) -->
                    <ignoreClass>javax.xml.namespace.QName</ignoreClass>
                    <!-- conflict with the javax.servlet-api, see comment above -->
                    <ignoreClass>javax.servlet.*</ignoreClass>
                  </ignoreClasses>
                </banDuplicateClasses>
                <requireMavenVersion>
                  <version>3.1.0</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!-- This plugin sorts the poms so that they are simpler to manage and merge -->
        <groupId>com.google.code.sortpom</groupId>
        <artifactId>maven-sortpom-plugin</artifactId>
        <version>2.2.1</version>
        <configuration>
          <predefinedSortOrder>custom_1</predefinedSortOrder>
          <lineSeparator>\n</lineSeparator>
          <encoding>${project.build.sourceEncoding}</encoding>
          <sortProperties>true</sortProperties>
          <keepBlankLines>true</keepBlankLines>
          <sortDependencies>scope, artifactId</sortDependencies>
          <nrOfIndentSpace>2</nrOfIndentSpace>
          <expandEmptyElements>false</expandEmptyElements>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>sort</goal>
            </goals>
            <phase>verify</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!-- Checks license headers throughout the project -->
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>2.11</version>
        <inherited>false</inherited>
        <configuration>
          <useDefaultExcludes>true</useDefaultExcludes>
          <useDefaultMapping>true</useDefaultMapping>
          <aggregate>true</aggregate>
          <strictCheck>true</strictCheck>
          <header>tools/tools-resources/src/main/resources/licenses/header.txt</header>

          <properties>
            <license.copyrightOwner>${project.organization.name}</license.copyrightOwner>
          </properties>
          <excludes>
            <!-- license files -->
            <exclude>**/COPYING.*</exclude>
            <exclude>**/LICENSE.*</exclude>
            <exclude>**/NOTICE.*</exclude>
            <exclude>**/README.*</exclude>
            <exclude>**/COPYING</exclude>
            <exclude>**/LICENSE</exclude>
            <exclude>**/NOTICE</exclude>
            <exclude>**/README</exclude>
            <exclude>**/*README.*</exclude>
            <exclude>**/*readme.*</exclude>
            <exclude>**/README*.*</exclude>
            <exclude>**/readme*.*</exclude>
            <exclude>**/banner.txt</exclude>
            <!-- manifest templates -->
            <exclude>**/*.mf</exclude>
            <exclude>**/bnd.bnd</exclude>
            <!-- resource modules -->
            <exclude>tools/license-resources/src/main/resources/**/*.*</exclude>
            <exclude>tools/tools-resources/src/main/resources/**/*.*</exclude>

            <!-- workspace-based maven local repository -->
            <exclude>.m2/**</exclude>
            <exclude>.npm/**</exclude>

            <!-- mercurial files-->
            <exclude>**/*.orig</exclude>
            <exclude>**/.hgtags</exclude>
            <exclude>**/.hgignore</exclude>
            <exclude>fix-versions.sh</exclude>

            <!-- other IDE / tools files -->
            <exclude>**/.idea/**/*</exclude>
            <exclude>**/nbactions.xml</exclude>
            <exclude>**/nb-configuration.xml</exclude>
            <exclude>**/.groovy/**/*</exclude>
            <exclude>**/.profiler/**/*</exclude>
            <exclude>**/.mvn/**/*</exclude>
            <exclude>**/*.versionsBackup</exclude>
            <exclude>**/*.bak</exclude>
            <exclude>**/*.swp</exclude>
            <exclude>**/*.log</exclude>
            <exclude>**/Thumbs.db</exclude>
            <exclude>**/*.swp</exclude>
            <exclude>**/.settings/**</exclude>
            <exclude>**/*.iml</exclude>
            <exclude>**/*.editorconfig</exclude>
            <!-- third-party javascript libraries -->
            <exclude>**/bower_modules/**/*</exclude>
            <exclude>**/node_modules/**/*</exclude>
            <exclude>**/node/**/*</exclude>
            <exclude>**/js/**/*.*</exclude>
            <exclude>**/scripts/ckeditor/**/*.*</exclude>
            <exclude>**/scripts/datatables/**/*.*</exclude>
            <exclude>**/scripts/jquery/**/*.*</exclude>
            <exclude>**/scripts/jqgrid/**/*.*</exclude>
            <exclude>**/scripts/jqplot/**/*.*</exclude>
            <exclude>**/scripts/iesupport/**/*.*</exclude>
            <exclude>**/scripts/thirdparties/**/*.*</exclude>
            <exclude>**/scripts/lib/**/*.*</exclude>
            <exclude>**/scripts/require*.js</exclude>
            <exclude>**/styles/ckeditor/**/*.*</exclude>
            <exclude>**/styles/datatables/**/*.*</exclude>
            <exclude>**/styles/jquery/**/*.*</exclude>
            <exclude>**/styles/jqgrid/**/*.*</exclude>
            <exclude>**/styles/jqplot/**/*.*</exclude>
            <exclude>**/styles/switchButton/*.*</exclude>
            <exclude>**/styles/**/thymol.js</exclude>
            <exclude>**/r.js</exclude>
            <exclude>**/scripts/sinon*.js</exclude>
            <exclude>**/styles/**/bootstrap*.css</exclude>
            <exclude>**/pubsub-boot.js</exclude>

            <exclude>**/*.properties</exclude>

            <!-- generated stylesheets -->
            <exclude>**/styles/**/squash.*.css</exclude>
            <!-- third-party wslds -->
            <exclude>**/*.wsdl</exclude>
            <!-- misc system / ide files -->
            <exclude>**/build.properties</exclude>
            <!-- felix configuration files -->
            <exclude>**/felix.*.properties</exclude>
            <!-- SQL files used by liquibase, breaks on mysql import when licensed -->
            <exclude>**/src/test/liquibase/**/*.sql</exclude>
            <exclude>**/src/main/liquibase/**/*.sql</exclude>
            <!-- IzPack files -->
            <exclude>**/izpack/**/*.*</exclude>
            <!-- m2e generated files -->
            <exclude>**/pom.properties</exclude>
            <exclude>**/pom.xml</exclude>
            <exclude>**/pom.xml.tag</exclude>
            <exclude>**/pom.xml.versionsBackup</exclude>
            <!-- webapp resources -->
            <exclude>**/webapp/images/*</exclude>
            <!-- jasper files -->
            <exclude>**/*.jasper</exclude>
            <!-- test resources -->
            <exclude>integration-tests/src/it/resources/**</exclude>
            <exclude>**/*.xlsx</exclude>
            <exclude>**/*.feature</exclude>
            <!--other -->
            <exclude>**/new_report.rptdesign</exclude>
            <!-- generated xml (dev) -->
            <exclude>**/tm.service/META-INF/**</exclude>
            <exclude>**/config/META-INF/**</exclude>
            <!-- jetty config for dev -->
            <exclude>**/provision/**/etc/jetty.xml</exclude>
            <exclude>**/provision/**/etc/jetty*.xml</exclude>
            <exclude>tm/tm.web/scripts/**</exclude>
            <exclude>tm/tm.web/images/**</exclude>
            <exclude>tm/tm.web/styles/**</exclude>
            <!-- excluding node module for jenkins -->
            <exclude>tm/tm.web/node_module/**</exclude>

          </excludes>
          <mapping>
            <tag>DYNASCRIPT_STYLE</tag>
            <jrxml>XML_STYLE</jrxml>
          </mapping>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>verify</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <inceptionYear>2010</inceptionYear>
  <organization>
    <name>Henix, henix.fr</name>
  </organization>
  <licenses>
    <license>
      <name>GNU Lesser General Public License V3</name>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:${project.basedir}</connection>
    <developerConnection>scm:git:${project.basedir}</developerConnection>
    <tag>squash-tm-1.22.0.IT24</tag>
  </scm>

  <repositories>

    <!--
      Redeclaring the default Maven Central repository, as declared by mvn help:effective-pom.
      This way we ensure it will be queried first, and hopefully would speed up the initial build
      of the project.
    -->
    <repository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>central</id>
      <name>Central Repository</name>
      <url>https://repo.maven.apache.org/maven2</url>
    </repository>

    <!--
      Declaration of the Squash official repositories
    -->
    <repository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>squash-release-repo</id>
      <url>http://repo.squashtest.org/maven2/releases</url>
    </repository>

    <repository>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <id>squash-snapshot-repo</id>
      <url>http://repo.squashtest.org/maven2/snapshots</url>
    </repository>

    <!--
      Jasper Reports hold unique artifacts in there
    -->
    <repository>
      <id>jasper-reports</id>
      <url>http://jasperreports.sourceforge.net/maven2</url>
    </repository>
  </repositories>

  <distributionManagement>
    <repository>
      <id>squash-release-deploy-repo</id>
      <name>Squash releases deployment repo</name>
      <url>${deploy-repo.release.url}</url>
    </repository>
    <snapshotRepository>
      <id>squash-snapshot-deploy-repo</id>
      <name>Squash snapshot deployment repo</name>
      <url>${deploy-repo.snapshot.url}</url>
    </snapshotRepository>
  </distributionManagement>

  <profiles>
    <!-- Default Squash TM dev profile -->
    <profile>
      <id>dev</id>
      <activation>
        <property>
          <name>env.type</name>
          <value>dev</value>
        </property>
      </activation>
      <properties>
        <verbose.compiler>true</verbose.compiler>
      </properties>
    </profile>

    <!-- This profile aims to run acceptance tests without compilation and
			units tests (if possible) -->
    <profile>
      <id>acceptance-tests</id>

      <modules>
        <module>integration-tests</module>
      </modules>

      <properties>
        <skipITs>false</skipITs>
        <skipTests>true</skipTests>
      </properties>
    </profile>

    <profile>
      <!-- Without this profile, mvn versions:... fails to detect "provision" module. This profile has no other use -->
      <id>provision</id>

      <modules>
        <module>provision</module>
      </modules>
    </profile>

    <!-- This profile aims to perform a build on the developper's machine before
			a push. It should not run anything against mysql -->
    <profile>
      <id>private-build</id>

      <modules>
        <module>integration-tests</module>
      </modules>
    </profile>


    <profile>

      <!--
        This profile sets the project up for jacoco records. It should be run in a separate build from
        the sonar-build, because there is an issue with the build order of the integration test that would
        make the merge of unit test and integration test execution traces impossible otherwise.
      -->
      <id>jacoco-records</id>
      <activation>
        <property>
          <name>jacoco.records</name>
        </property>
      </activation>
      <build>
        <plugins>

          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco-maven-plugin.version}</version>

            <executions>
              <execution>
                <id>jacoco-prepare-ut-agent</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
              </execution>

            </executions>

          </plugin>

        </plugins>
      </build>
    </profile>

    <profile>
      <!--
        the profile sonar-build will preprocess any qualimetry-related resource before sonarqube scanner is run.
      -->
      <id>sonar-build</id>
      <properties>
        <sonar.exclusions>**/webapp/js/**, **/scripts/lib/**, **/scripts/lib/**, **/scripts/ckeditor/**, **/scripts/datatables/**, **/scripts/jquery/**, **/scripts/sinon.js, **/scripts/require.js, **/scripts/require-min.js, **/scripts/text.js, **/styles/ckeditor/**, **/styles/spectrum/**, **/styles/switchButton/**, **/styles/jqplot/**, **/styles/images/**, **/styles/jquery/**, **/styles/bootstrap*, **/org/springframework/**</sonar.exclusions>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco-maven-plugin.version}</version>

            <executions>

              <execution>
                <id>jacoco-merge-it</id>
                <goals>
                  <goal>merge</goal>
                </goals>
                <phase>validate</phase>
                <configuration>
                  <fileSets>
                    <fileSet>
                      <directory>${session.executionRootDirectory}</directory>
                      <includes>
                        <include>integration-tests/target/jacoco-it.exec</include>
                      </includes>
                    </fileSet>
                    <fileSet>
                      <directory>${project.build.directory}</directory>
                      <includes>
                        <include>jacoco.exec</include>
                      </includes>
                    </fileSet>
                  </fileSets>
                  <destFile>target/jacoco.exec</destFile>
                </configuration>
              </execution>

            </executions>

          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      This profile forbids the javadoc plugin to fail for linter reasons.
      The proper fix (that is, really documenting parameters and such) must
      wait a bit.
    -->
    <profile>
      <id>disable-java8-doclint</id>
      <activation>
        <jdk>[1.8,)</jdk>
      </activation>
      <properties>
        <additionalparam>-Xdoclint:none</additionalparam>
      </properties>
    </profile>

  </profiles>
</project>
