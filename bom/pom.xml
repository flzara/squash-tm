<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.squashtest.tm</groupId>
    <artifactId>squash-tm</artifactId>
    <version>1.21.1.RC2</version>
  </parent>

  <artifactId>squash-tm-bom</artifactId>
  <packaging>pom</packaging>

  <description>This module defines the preferred dependencies and their version to be used throughout the project. To declare a
    dependency, another module should :
    1. include this artifact in the dependencyManagement section with the "import" scope
    2. declare the required dependency in the dependencies section **without** a version number</description>

  <properties>
    <!-- jasperreports.version defined in parent pom because it's used in plugin mgt -->
    <cglib-nodep.version>3.2.4</cglib-nodep.version>
    <commons-beanutils.version>1.9.0</commons-beanutils.version>
    <commons-collections.version>3.2.2</commons-collections.version>
    <commons-compress.version>1.16.1</commons-compress.version>
    <commons-fileupload.version>1.3.2</commons-fileupload.version>
    <commons-io.version>2.4</commons-io.version>
    <commons-lang3.version>3.3.2</commons-lang3.version>
    <commons-validator.version>1.5.1</commons-validator.version>
    <!-- ecj.version should match that pulled by org.apache.tomcat.embed:tomcat-embed-jasper -->
    <ecj.version>3.16.0</ecj.version>
    <ehcache.version>3.3.0</ehcache.version>
    <gherkin.version>5.0.0</gherkin.version>

    <google.http.client.version>1.23.0</google.http.client.version>
    <google.http.oauth.version>1.23.0</google.http.oauth.version>

    <guava.version>18.0</guava.version>
    <h2.version>1.4.187</h2.version>

    <!--
    	SB 2.1.6 would normally pull hibernate 5.3.10. However a bug in QueryDsl is still waiting to be resolved :
    	https://github.com/querydsl/querydsl/issues/2326. Until then we should forego Hibernate updates.

    	Note that the previous upgrade lead to a different bug : https://github.com/querydsl/querydsl/issues/1917
    	We fixed this in-house, see org.squashtest.tm.domain.jpql.FixedSessionHolders. That particular bug is
    	resolved for Hibernate 5.3.10. When we can finally upgrade, that class can be removed too.

    	Also, in this very pom remove the version for the dependency-management of hibernate-entitymanager.
    	Also, when we can ready Hibernate 5.4.10, see Javassist override
     -->
    <hibernate-core.version>5.2.17.Final</hibernate-core.version>

    <!-- Spring Boot version 2.0.3 implies Jackson 2.9.6 -->
    <jackson.version>2.9.6</jackson.version>

    <!-- javassist version override because of https://github.com/jboss-javassist/javassist/issues/194 -->
    <javassist.version>3.25.0-GA</javassist.version>
    <javax.cache-api.version>1.1.0</javax.cache-api.version>
    <javax.inject.version>1</javax.inject.version>
    <jaxb.version>2.3.1</jaxb.version>
    <jericho-html.version>3.3</jericho-html.version>
    <mysql-connector-java.version>5.1.39</mysql-connector-java.version>
    <poi.version>3.12</poi.version>

    <!-- warning : querysdl.version should match that of spring-data-jpa -->
    <postgresql.version>9.4.1209.jre7</postgresql.version>
    <querydsl.version>4.2.1</querydsl.version>
    <spock.version>1.2-groovy-2.4</spock.version>
    <spring-security-oauth2.version>2.0.14.RELEASE</spring-security-oauth2.version>

    <!-- Spring Boot version 2.1.6.RELEASE implies Spring Sec version 5.0.6.RELEASE-->
    <spring-security.version>5.0.6.RELEASE</spring-security.version>

    <thymeleaf-extras-springsecurity5.version>3.0.4.RELEASE</thymeleaf-extras-springsecurity5.version>

    <unitils.version>3.4.2</unitils.version>
    <validation-api.version>2.0.1.Final</validation-api.version>
    <xml-resolver.version>1.2</xml-resolver.version>

  </properties>

  <dependencyManagement>
    <dependencies>

      <dependency>
        <groupId>axis</groupId>
        <artifactId>axis</artifactId>
        <version>1.4</version>
      </dependency>

      <dependency>
        <groupId>javax.cache</groupId>
        <artifactId>cache-api</artifactId>
        <version>${javax.cache-api.version}</version>
      </dependency>

      <dependency>
        <groupId>cglib</groupId>
        <artifactId>cglib-nodep</artifactId>
        <version>${cglib-nodep.version}</version>
      </dependency>

      <dependency>
        <groupId>commons-beanutils</groupId>
        <artifactId>commons-beanutils</artifactId>
        <version>${commons-beanutils.version}</version>
        <exclusions>
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>commons-collections</groupId>
        <artifactId>commons-collections</artifactId>
        <version>${commons-collections.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-compress</artifactId>
        <version>${commons-compress.version}</version>
      </dependency>

      <dependency>
        <groupId>commons-fileupload</groupId>
        <artifactId>commons-fileupload</artifactId>
        <version>${commons-fileupload.version}</version>
      </dependency>

      <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>${commons-io.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>${commons-lang3.version}</version>
      </dependency>

      <dependency>
        <groupId>commons-validator</groupId>
        <artifactId>commons-validator</artifactId>
        <version>${commons-validator.version}</version>
        <exclusions>
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <!-- see comment in the exlude section of net.sf.jasperreports:jasperreports -->
        <groupId>org.eclipse.jdt</groupId>
        <artifactId>ecj</artifactId>
        <version>${ecj.version}</version>
      </dependency>

      <dependency>
        <groupId>org.ehcache</groupId>
        <artifactId>ehcache</artifactId>
        <version>${ehcache.version}</version>
      </dependency>

      <dependency>
        <groupId>io.cucumber</groupId>
        <artifactId>gherkin</artifactId>
        <version>${gherkin.version}</version>
      </dependency>

      <dependency>
        <groupId>com.google.http-client</groupId>
        <artifactId>google-http-client</artifactId>
        <version>${google.http.client.version}</version>
      </dependency>

      <dependency>
        <groupId>com.google.oauth-client</groupId>
        <artifactId>google-oauth-client</artifactId>
        <version>${google.http.oauth.version}</version>
      </dependency>

      <dependency>
        <groupId>org.codehaus.groovy</groupId>
        <artifactId>groovy-all</artifactId>
        <version>${groovy.version}</version>
      </dependency>

      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>${guava.version}</version>
      </dependency>

      <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <!-- see comment on hibernate-core.version -->
        <version>${hibernate-core.version}</version>
        <!-- here our transaction api will be javax.transaction-api instead -->
        <exclusions>
          <exclusion>
            <groupId>org.jboss.spec.javax.transaction</groupId>
            <artifactId>jboss-transaction-api_1.2_spec</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-entitymanager</artifactId>
        <!-- see comment on hibernate-core.version -->
        <version>${hibernate-core.version}</version>
        <exclusions>
          <!-- our transaction api is the official transaction api -->
          <exclusion>
            <groupId>org.jboss.spec.javax.transaction</groupId>
            <artifactId>jboss-transaction-api_1.2_spec</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>com.fasterxml.jackson.datatype</groupId>
        <artifactId>jackson-datatype-hibernate5</artifactId>
        <version>${jackson.version}</version>
      </dependency>

      <dependency>
        <groupId>net.sf.jasperreports</groupId>
        <artifactId>jasperreports</artifactId>
        <version>${jasperreports.version}</version>

        <exclusions>
          <!--
        		Some dependencies of Jasperreports are a mess (not jasper reports itself
        		though) : itext and castor-xml. Their own dependencies must also be
        		managed here.

        		Note that the version of itext here has been slightly modified by the JR
        		team and is served by their own maven repository.

        		Note: no wild card used here for duplicate dependencies because maven-enforcer-plugin
        		doesn't handle them well (see https://issues.apache.org/jira/browse/MENFORCER-195).
        		Each offending dependency will be listed explicitly instead.
        	 -->

          <!--
		  		Bouncycastle is pulled by itext. But no we wont do xmlsecurity in our documents
		  		so we just exclude them.
		  		Beside the lib changed its groupid from 'bouncycastle' to 'org.bouncycastle',
		  		which effectively allows Maven to pull both set of bouncycastle artifacts (as shown by
		  		dependency:tree -Dverbose) with no regard for the Shrödinbugs it induces at runtime.

		  		Note : we don't use the wildcard notation here because maven-enforcer-plugin
		  		cant handle it properly (see https://issues.apache.org/jira/browse/MENFORCER-195)
		  		so we explicitly declare the three of them.
		  	-->
          <exclusion>
            <groupId>bouncycastle</groupId>
            <artifactId>bcmail-jdk14</artifactId>
          </exclusion>

          <exclusion>
            <groupId>bouncycastle</groupId>
            <artifactId>bcprov-jdk14</artifactId>
          </exclusion>

          <exclusion>
            <groupId>bouncycastle</groupId>
            <artifactId>bctsp-jdk14</artifactId>
          </exclusion>

          <!--
        		I could argue how castor-xml pulls both
        		stax:stax-api:1.0.1 and javax:xml:stream:stax-api:1.0-2
        		but since stax-api is now part of java rt since 1.6
        		we just remove both altogether.
        	 -->
          <exclusion>
            <groupId>stax</groupId>
            <artifactId>stax-api</artifactId>
          </exclusion>

          <exclusion>
            <groupId>javax.xml.stream</groupId>
            <artifactId>stax-api</artifactId>
          </exclusion>

          <!--  we don't do report on lucene indexes -->
          <exclusion>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
          </exclusion>

          <exclusion>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers-common</artifactId>
          </exclusion>

          <exclusion>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-queryparser</artifactId>
          </exclusion>

          <!-- xml-api part of the java runtime already -->
          <exclusion>
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
          </exclusion>

          <!-- no, we don't do BI either -->
          <exclusion>
            <groupId>org.olap4j</groupId>
            <artifactId>olap4j</artifactId>
          </exclusion>

          <!-- no commons logging -->
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>

          <!--
          	Jasper Reports compiles java with
          	org.eclipse.jdt.core.compiler:ecj, which is a subset
          	of the broader org.eclipse.jdt:ecj pulled
          	by tomcat-embed-jasper in the tm.web project.

          	Previous versions of tomcat-embed-jasper also
          	ran using the core.compiler ecj variant but as
          	of 8.5.31 (and probably earlier)
          	the later is used. In order to avoid ending
          	with both jars in the final assembly we now
          	wire Jasper Reports with org.eclipse.jdt:ecj.

          	Projects that pull jasperreports as configured by
          	this bom should be aware of this : they should
          	add org.eclipse.jdt:ecj to their dependencies.

          	Even better, they should simply depend on
          	org.squashtest.tm:core.report.api and not worry
          	about this.
            -->

          <exclusion>
            <groupId>org.eclipse.jdt.core.compiler</groupId>
            <artifactId>ecj</artifactId>
          </exclusion>

        </exclusions>

      </dependency>

      <dependency>
        <!--
      		Version override because of https://github.com/jboss-javassist/javassist/issues/194.
      		Initially pulled by Hibernate. The fix for the issue above is available for version 3.24.0-GA+,
      		which means we can remove this version override when we can upgrade to Hibernate 5.4.10 (5.3 won't cut it yet)
      	-->
        <groupId>org.javassist</groupId>
        <artifactId>javassist</artifactId>
        <version>${javassist.version}</version>
      </dependency>

      <dependency>
        <groupId>javax.inject</groupId>
        <artifactId>javax.inject</artifactId>
        <version>${javax.inject.version}</version>
      </dependency>

      <dependency>
        <groupId>net.htmlparser.jericho</groupId>
        <artifactId>jericho-html</artifactId>
        <version>${jericho-html.version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.jsoup/jsoup -->
      <dependency>
        <groupId>org.jsoup</groupId>
        <artifactId>jsoup</artifactId>
        <version>1.7.2</version>
      </dependency>

      <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>${poi.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>${poi.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml-schemas</artifactId>
        <version>${poi.version}</version>
        <exclusions>
          <exclusion>
            <!-- part of the jdk since 1.6 -->
            <groupId>stax</groupId>
            <artifactId>stax-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <!-- This is useful for IDEs to generate some metadata. Do not remove -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-configuration-processor</artifactId>
        <version>${spring.boot.version}</version>
        <optional>true</optional>
      </dependency>

      <dependency>
        <!-- Configuring logging : we have to exclude default (logback) and explicitly include log4j -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
        <version>${spring.boot.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-aop</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jdbc</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jooq</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-log4j</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-mail</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>${spring.boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.security.oauth</groupId>
        <artifactId>spring-security-oauth2</artifactId>
        <version>${spring-security-oauth2.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-taglibs</artifactId>
        <version>${spring-security.version}</version>
      </dependency>

      <!--dependency>
        <groupId>org.thymeleaf</groupId>
        <artifactId>thymeleaf</artifactId>
        <version>${thymeleaf.version}</version>
      </dependency-->

      <dependency>
        <groupId>org.thymeleaf.extras</groupId>
        <artifactId>thymeleaf-extras-springsecurity5</artifactId>
        <version>${thymeleaf-extras-springsecurity5.version}</version>
      </dependency>

      <dependency>
        <groupId>org.unitils</groupId>
        <artifactId>unitils-core</artifactId>
        <version>${unitils.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.unitils</groupId>
        <artifactId>unitils-database</artifactId>
        <version>${unitils.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate</artifactId>
          </exclusion>
          <exclusion>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-nop</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.unitils</groupId>
        <artifactId>unitils-dbunit</artifactId>
        <version>${unitils.version}</version>
      </dependency>

      <dependency>
        <groupId>org.unitils</groupId>
        <artifactId>unitils-spring</artifactId>
        <version>${unitils.version}</version>
      </dependency>

      <dependency>
        <groupId>javax.validation</groupId>
        <artifactId>validation-api</artifactId>
        <version>${validation-api.version}</version>
      </dependency>

      <dependency>
        <groupId>com.querydsl</groupId>
        <artifactId>querydsl-apt</artifactId>
        <version>${querydsl.version}</version>
        <scope>provided</scope>
        <exclusions>
          <exclusion>
            <groupId>javax.jdo</groupId>
            <artifactId>jdo-api</artifactId>
          </exclusion>
          <exclusion>
            <!--
          		Querydsl-codegen uses an obsolete version of eclipse ecj (org.eclipse.jdt.core.compiler:ecj).
          		We need it at compile time only (not runtime). Still at runtime, when running in Eclipse IDE it will
          		be loaded in place of the good one (org.eclipse.jdt:ecj) which entails JSP compilation failures
          		(see https://github.com/spring-projects/spring-boot/issues/14398).

          		This is very annoying because the final Maven dependencies are correct and a distro would run
          		without problem because only ecj:${ecj.version} would be loaded.

          		The solution here is to forcibly ban org.eclipse.jdt.core.compiler just because of that, and
          		Querydsl-s apt-maven-plugin will have to settle for the jdk compiler instead.
          	-->
            <groupId>org.eclipse.jdt.core.compiler</groupId>
            <artifactId>ecj</artifactId>

          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.beanshell</groupId>
        <artifactId>bsh</artifactId>
        <version>${bsh.version}</version>
        <scope>runtime</scope>
      </dependency>

      <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <version>${h2.version}</version>
        <scope>runtime</scope>
      </dependency>

      <dependency>
        <groupId>javax.xml.bind</groupId>
        <artifactId>jaxb-api</artifactId>
        <version>${jaxb.version}</version>
        <scope>runtime</scope>
      </dependency>

      <dependency>
        <groupId>org.glassfish.jaxb</groupId>
        <artifactId>jaxb-runtime</artifactId>
        <version>${jaxb.version}</version>
        <scope>runtime</scope>
      </dependency>

      <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>${mysql-connector-java.version}</version>
        <scope>runtime</scope>
      </dependency>

      <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>${postgresql.version}</version>
        <scope>runtime</scope>
      </dependency>

      <dependency>
        <groupId>xml-resolver</groupId>
        <artifactId>xml-resolver</artifactId>
        <version>${xml-resolver.version}</version>
        <scope>runtime</scope>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.spockframework</groupId>
        <artifactId>spock-core</artifactId>
        <version>${spock.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.spockframework</groupId>
        <artifactId>spock-spring</artifactId>
        <version>${spock.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.spockframework</groupId>
        <artifactId>spock-unitils</artifactId>
        <version>${spock.version}</version>
        <scope>test</scope>
      </dependency>

    </dependencies>
  </dependencyManagement>

</project>
