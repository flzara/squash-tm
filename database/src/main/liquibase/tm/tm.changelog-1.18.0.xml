<?xml version="1.0" encoding="UTF-8"?>
<!--

        This file is part of the Squashtest platform.
        Copyright (C) Henix, henix.fr

        See the NOTICE file distributed with this work for additional
        information regarding copyright ownership.

        This is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        this software is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with this software.  If not, see <http://www.gnu.org/licenses/>.

-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">


  <changeSet id="tm-1.18.0" author="jthebault">
    <comment>Update TM database version number</comment>
    <update tableName="CORE_CONFIG">
      <column name="VALUE" value="1.18.0"/>
      <where>STR_KEY = 'squashtest.tm.database.version'</where>
    </update>
  </changeSet>

  <changeSet id="tm-1.18.0-connection-log-table" author="aguilhem">
    <comment>Create Connection Attempt Log Table</comment>
    <createTable tableName="CONNECTION_ATTEMPT_LOG">
      <column name="ATTEMPT_ID" type="BIGINT" autoIncrement="true" remarks="autogenerated ID">
        <constraints primaryKey="true" nullable="false"/>
      </column>
      <column name="LOGIN" type="java.sql.Types.VARCHAR(50)" remarks="login used to connect"/>
      <column name="CONNECTION_DATE" type="DATETIME" remarks="Date of connection">
        <constraints nullable="false"/>
      </column>
      <column name="SUCCESS" type="BOOLEAN" remarks="if connection succeeded or not">
        <constraints nullable="false"/>
      </column>
    </createTable>
  </changeSet>

  <changeSet id="tm-1.18.0-project-template-link" author="jlor">
    <comment>Adding a column to keep the link between a Project and a Project Template</comment>
    <addColumn tableName="PROJECT">
      <column name="TEMPLATE_ID" type="bigint">
        <constraints nullable="true"
                     foreignKeyName="fk_project_template_id"
                     references="PROJECT(PROJECT_ID)"/>
      </column>
    </addColumn>
  </changeSet>


  <changeSet id="tm-1.18.0-feature-2342" author="cholc">
    <comment>Adding columns to keep track of who modified the ActionTestStep</comment>

    <addColumn tableName="ACTION_TEST_STEP">
      <column name="CREATED_BY" type="java.sql.Types.VARCHAR(50)" defaultValue="default">
        <constraints nullable="false"/>
      </column>
    </addColumn>

    <addColumn tableName="ACTION_TEST_STEP">
      <column name="CREATED_ON" type="DATETIME" defaultValue="1970-01-01 00:00:00">
        <constraints nullable="false"/>
      </column>
    </addColumn>

    <addColumn tableName="ACTION_TEST_STEP">
      <column name="LAST_MODIFIED_BY" type="java.sql.Types.VARCHAR(50)" defaultValue="NULL"/>
    </addColumn>

    <addColumn tableName="ACTION_TEST_STEP">
      <column name="LAST_MODIFIED_ON" type="DATETIME" defaultValue="NULL"/>
    </addColumn>
  </changeSet>

  <changeSet id="tm-1.18.0-feature-2342-mysql" author="cholc" dbms="mysql">

    <comment>mysql-triggers to update the TEST_CASE_LIBRARY_NODE table's audit</comment>

    <!-- after creation of test case step : update tcln last modified by and last modified on -->
    <!--I put the trigger on TCS because it seems that the row in the join table is inserted after the trigger so the
    join doesn't work-->
    <sql>
      drop trigger if exists ins_tcs_after;

      create trigger ins_tcs_after after insert on
      TEST_CASE_STEPS
      for each row
      UPDATE
        TEST_CASE_LIBRARY_NODE TCLN
      JOIN TEST_CASE_STEPS TCS
        ON TCLN.TCLN_ID = TCS.TEST_CASE_ID
      JOIN ACTION_TEST_STEP ATS
        ON TCS.STEP_ID = ATS.TEST_STEP_ID
      SET
        TCLN.LAST_MODIFIED_BY = ATS.LAST_MODIFIED_BY,
        TCLN.LAST_MODIFIED_ON = ATS.LAST_MODIFIED_ON
      WHERE ATS.TEST_STEP_ID= NEW.STEP_ID
    </sql>

    <!-- after update of action test step : update tcln last modified by and last modified on -->
    <sql>
      drop trigger if exists upd_ats_after;

      create trigger upd_ats_after after update on
    ACTION_TEST_STEP
    for each row
      UPDATE
        TEST_CASE_LIBRARY_NODE TCLN
      JOIN TEST_CASE_STEPS TCS
        ON TCS.TEST_CASE_ID = TCLN.TCLN_ID
    SET
        TCLN.LAST_MODIFIED_BY = NEW.LAST_MODIFIED_BY,
        TCLN.LAST_MODIFIED_ON = NEW.LAST_MODIFIED_ON
    WHERE
        TCS.STEP_ID = NEW.TEST_STEP_ID;
    </sql>

    <!-- after delete of test case step : update tcln last modified by and last modified on -->
    <sql>
      drop trigger if exists del_tcs_after;

      create trigger del_tcs_after after delete on
      TEST_CASE_STEPS
      for each row
      UPDATE
        TEST_CASE_LIBRARY_NODE TCLN
      SET
        TCLN.LAST_MODIFIED_ON = NOW()
      WHERE
        TCLN.TCLN_ID = OLD.TEST_CASE_ID;
    </sql>

  </changeSet>

  <changeSet id="tm-1.18.0-feature-2342-postgres" author="cholc" dbms="postgresql">

    <comment>postgresql-triggers to update the TEST_CASE_LIBRARY_NODE table's audit</comment>

    <!-- after creation of test case step : update tcln last modified by and last modified on -->
    <createProcedure>
      drop trigger if exists ins_tcs_after on TEST_CASE_STEPS;
      drop function if exists ins_tcs_after();

      create function ins_tcs_after() returns trigger as $ins_tcs_after$
      begin
        UPDATE
          TEST_CASE_LIBRARY_NODE TCLN
        SET
          LAST_MODIFIED_BY = ATS.LAST_MODIFIED_BY,
          LAST_MODIFIED_ON = ATS.LAST_MODIFIED_ON
        FROM
          TEST_CASE_STEPS TCS,
          ACTION_TEST_STEP ATS
        WHERE
          TCLN.TCLN_ID = TCS.TEST_CASE_ID AND
          TCS.STEP_ID = ATS.TEST_STEP_ID AND
          ATS.TEST_STEP_ID = NEW.STEP_ID;
        return NEW;
      end;
      $ins_tcs_after$ language plpgsql;

      create trigger ins_tcs_after after insert on TEST_CASE_STEPS
      for each row execute procedure ins_tcs_after();

    </createProcedure>

    <!-- after update of action test step : update tcln last modified by and last modified on-->
    <createProcedure>
      drop trigger if exists upd_tcs_after on ACTION_TEST_STEP;
      drop function if exists upd_tcs_after();

      create function upd_tcs_after() returns trigger as $upd_tcs_after$
      begin
        UPDATE
          TEST_CASE_LIBRARY_NODE TCLN
        SET
          LAST_MODIFIED_BY = NEW.LAST_MODIFIED_BY,
          LAST_MODIFIED_ON = NEW.LAST_MODIFIED_ON
        FROM
          TEST_CASE_STEPS TCS
        WHERE
          TCLN.TCLN_ID = TCS.TEST_CASE_ID AND
          TCS.STEP_ID = NEW.TEST_STEP_ID;
        return NEW;
      end;
      $upd_tcs_after$ language plpgsql;

      create trigger upd_tcs_after after update on ACTION_TEST_STEP
      for each row execute procedure upd_tcs_after();

    </createProcedure>

    <!-- after delete of test case step : update tcln last modified by and last modified on -->
    <createProcedure>
      drop trigger if exists del_tcs_after on TEST_CASE_STEPS;
      drop function if exists del_tcs_after();

      create function del_tcs_after() returns trigger as $del_tcs_after$
      begin
        UPDATE
          TEST_CASE_LIBRARY_NODE TCLN
        SET
          LAST_MODIFIED_ON = current_timestamp
        WHERE
          TCLN.TCLN_ID = OLD.TEST_CASE_ID;
        return OLD;
      end;
      $del_tcs_after$ language plpgsql;

      create trigger del_tcs_after after delete on TEST_CASE_STEPS
      for each row execute procedure del_tcs_after();

    </createProcedure>

  </changeSet>

  <changeSet id="tm-1.18.0-feature-2342-h2" author="cholc" dbms="h2">

    <comment>h2-triggers to update the TEST_CASE_LIBRARY_NODE table's audit</comment>

    <!-- the update is triggered on insert and delete too and it somehow gets the new data after a delete... -->
    <!-- after update of action test step : update tcln last modified by and last modified on -->
    <sql>
      create trigger upd_tcs_after after update on
      ACTION_TEST_STEP
      for each row call
      "org.squashtest.csp.h2.triggers.ATSAfterUpdate";
    </sql>

  </changeSet>

  <!-- Updating the testcase when updating the parameters -->

  <changeSet id="tm-1.18.0-feature-2342-2" author="bflessel">
    <comment>Adding columns to keep track of who modified the parameters</comment>

    <addColumn tableName="PARAMETER">
      <column name="CREATED_BY" type="java.sql.Types.VARCHAR(50)" defaultValue="default">
        <constraints nullable="false"/>
      </column>
    </addColumn>

    <addColumn tableName="PARAMETER">
      <column name="CREATED_ON" type="DATETIME" defaultValue="1970-01-01 00:00:00">
        <constraints nullable="false"/>
      </column>
    </addColumn>

    <addColumn tableName="PARAMETER">
      <column name="LAST_MODIFIED_BY" type="java.sql.Types.VARCHAR(50)" defaultValue="NULL"/>
    </addColumn>

    <addColumn tableName="PARAMETER">
      <column name="LAST_MODIFIED_ON" type="DATETIME" defaultValue="NULL"/>
    </addColumn>
  </changeSet>

  <changeSet id="tm-1.18.0-feature-2342-2-mysql" author="bflessel" dbms="mysql">

    <comment>mysql-triggers for PARAMETER table</comment>

    <!-- after insertion of a parameter : create auto reference in the closure
          table -->
    <sql>
      create trigger update_tcln_after_parameter after update on
        PARAMETER
      for each row
        UPDATE TEST_CASE_LIBRARY_NODE as TCLN
      JOIN
      PARAMETER P ON P.TEST_CASE_ID = TCLN.TCLN_ID
        TCLN.LAST_MODIFIED_BY := new.LAST_MODIFIED_BY,
        TCLN.LAST_MODIFIED_ON := new.LAST_MODIFIED_ON
      WHERE
        TCLN.TCLN_ID = new.TEST_CASE_ID;
    </sql>

  </changeSet>

  <changeSet id="tm-1.18.0-feature-2342-2-postgresql" author="BFLESSEL" dbms="postgresql">

    <comment>postgresql-triggers for PARAMETER table</comment>

    <!-- after insertion of a cl node : create auto reference in the closure
          table -->

    <createProcedure>
      drop trigger if exists update_tcln_after_updating_parameter on PARAMETER;
      drop trigger if exists update_tcln_after_updating_parameter on TEST_CASE_LIBRARY_NODE;
      drop function if exists update_tcln_after_updating_parameter();

      create function update_tcln_after_updating_parameter() returns trigger as $update_tcln_after_updating_parameter$
      begin
        UPDATE TEST_CASE_LIBRARY_NODE
        SET
          LAST_MODIFIED_BY = new.LAST_MODIFIED_BY,
          LAST_MODIFIED_ON = new.LAST_MODIFIED_ON
        from parameter
        where
          TEST_CASE_LIBRARY_NODE.tcln_id = new.test_case_id;
        return new;
      end;
      $update_tcln_after_updating_parameter$ language plpgsql;

      create trigger update_tcln_after_updating_parameter after update on  PARAMETER
      for each row execute procedure update_tcln_after_updating_parameter();
    </createProcedure>

    <createProcedure>
      drop trigger if exists update_tcln_after_inserting_parameter on PARAMETER;
      drop trigger if exists update_tcln_after_inserting_parameter on TEST_CASE_LIBRARY_NODE;
      drop function if exists update_tcln_after_inserting_parameter();

      create function update_tcln_after_inserting_parameter() returns trigger as $update_tcln_after_inserting_parameter$
      begin
        UPDATE TEST_CASE_LIBRARY_NODE
        SET
          LAST_MODIFIED_BY = new.created_by,
          LAST_MODIFIED_ON = new.created_on
        from parameter
        where
          TEST_CASE_LIBRARY_NODE.tcln_id = new.test_case_id;
        return new;
      end;
      $update_tcln_after_inserting_parameter$ language plpgsql;

      create trigger update_tcln_after_inserting_parameter after insert on  PARAMETER
      for each row execute procedure update_tcln_after_inserting_parameter();
    </createProcedure>

    <createProcedure>
      drop trigger if exists update_tcln_after_deleting_parameter on PARAMETER;
      drop trigger if exists update_tcln_after_deleting_parameter on TEST_CASE_LIBRARY_NODE;
      drop function if exists update_tcln_after_deleting_parameter();

      create function update_tcln_after_deleting_parameter() returns trigger as $update_tcln_after_deleting_parameter$
      begin
        UPDATE TEST_CASE_LIBRARY_NODE
        SET
          LAST_MODIFIED_ON = CURRENT_TIMESTAMP
        from parameter
        where
          TEST_CASE_LIBRARY_NODE.tcln_id = old.test_case_id;
        return new;
      end;
      $update_tcln_after_deleting_parameter$ language plpgsql;

      create trigger update_tcln_after_deleting_parameter after DELETE on  PARAMETER
      for each row execute procedure update_tcln_after_deleting_parameter();
    </createProcedure>




  </changeSet>



</databaseChangeLog>
