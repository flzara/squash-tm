<?xml version="1.0" encoding="UTF-8"?>
<!--

        This file is part of the Squashtest platform.
        Copyright (C) Henix, henix.fr

        See the NOTICE file distributed with this work for additional
        information regarding copyright ownership.

        This is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        this software is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with this software.  If not, see <http://www.gnu.org/licenses/>.

-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">


  <changeSet id="tm-1.21.0" author="jprioux">
    <comment>Update TM database version number</comment>
    <update tableName="CORE_CONFIG">
      <column name="VALUE" value="1.21.0"/>
      <where>STR_KEY = 'squashtest.tm.database.version'</where>
    </update>
  </changeSet>

  <changeSet id="tm-1.21.0-TM-244-remote-automation-request-extender" author="jlor">

    <comment>Create new table for RemoteAutomationRequestExtender</comment>

    <createTable tableName="REMOTE_AUTOMATION_REQUEST_EXTENDER">

      <column name="REMOTE_AUTOMATION_REQUEST_EXTENDER_ID" type="BIGINT" autoIncrement="true" remarks="The auto-generated id">
        <constraints primaryKey="true" nullable="false" />
      </column>

      <column name="AUTOMATION_REQUEST_ID" type="BIGINT" remarks="The automation request this extender extends">
        <constraints nullable="false" foreignKeyName="fk_remote_automation_request_extender_automation_request_id" references="AUTOMATION_REQUEST (AUTOMATION_REQUEST_ID)" />
      </column>

      <column name="SERVER_ID" type="BIGINT" remarks="The bugtracker to which the automation request is linked">
        <constraints nullable="true" foreignKeyName="fk_remote_automation_request_extender_server_id" references="BUGTRACKER (BUGTRACKER_ID)" />
      </column>

      <column name="REMOTE_STATUS" type="VARCHAR(255)" remarks="The remote status as defined in the bugtracker">
        <constraints nullable="true" />
      </column>

      <column name="REMOTE_ISSUE_KEY" type="VARCHAR(255)" remarks="The remote issue key as generated by Jira">
        <constraints nullable="false" />
      </column>

      <column name="REMOTE_REQUEST_URL" type="VARCHAR(300)" remarks="The Url to the remote request">
        <constraints nullable="true" />
      </column>

      <column name="REMOTE_ASSIGNED_TO" type="VARCHAR(300)" remarks="email of the assigned">
        <constraints nullable="false" />
      </column>


    </createTable>

    <createIndex tableName="REMOTE_AUTOMATION_REQUEST_EXTENDER" indexName="idx_fk_remote_automation_request_extender_automation_request_id">
      <column name="AUTOMATION_REQUEST_ID" />
    </createIndex>

    <createIndex tableName="REMOTE_AUTOMATION_REQUEST_EXTENDER" indexName="idx_fk_remote_automation_request_extender_server_id">
      <column name="SERVER_ID" />
    </createIndex>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-248-automation-workflow-type" author="jlor">

    <comment>Modify column ALLOW_AUTOMATION_WORKFLOW into AUTOMATION_WORKFLOW_TYPE</comment>

    <addColumn tableName="PROJECT">
      <column name="AUTOMATION_WORKFLOW_TYPE" type="VARCHAR(25)" defaultValue="NONE" remarks="This column precises which workflow type is used.">
        <constraints nullable="false" />
      </column>
    </addColumn>

    <sql>
      update PROJECT
      set AUTOMATION_WORKFLOW_TYPE =
      case
      when ALLOW_AUTOMATION_WORKFLOW = true then 'NATIVE'
      else 'NONE'
      end;
    </sql>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-248-plugin-type" author="amk">

    <comment>add new column PLUGIN_TYPE into LIBRARY_PLUGIN_BINDING</comment>

    <addColumn tableName="LIBRARY_PLUGIN_BINDING">
      <column name="PLUGIN_TYPE" type="VARCHAR(25)"  remarks="This column specifies which type of plugin is used. for now only one type used: Automation.">
        <constraints nullable="true" />
      </column>
    </addColumn>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-211-active" author="amk">

    <comment>add new column ACTIVE into LIBRARY_PLUGIN_BINDING</comment>

    <addColumn tableName="LIBRARY_PLUGIN_BINDING">
      <column name="ACTIVE" type="BOOLEAN"  remarks="This column specifies if plugin is enable or disable for a project ." defaultValueBoolean="true">
      </column>
    </addColumn>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-649-sync-enable" author="api">
    <comment> add new column Sync_Enable into REMOTE_SYNCHONISATION </comment>

    <addColumn tableName="REMOTE_SYNCHRONISATION">
      <column name="SYNC_ENABLE" type="BOOLEAN" remarks="This column specifies if synchronisation is enable or disable for a project" defaultValueBoolean="true">
        <constraints nullable="false"/>
      </column>
    </addColumn>
  </changeSet>

  <changeSet id="tm-1.21.0-test-case-script-type" author="jlor">
    <comment>Add a new column TC_SCRIPT_TYPE</comment>
    <addColumn tableName="PROJECT">
      <column name="TC_SCRIPT_TYPE" type="VARCHAR(25)" defaultValue="GHERKIN" remarks="This column specifies the type of scripted test cases used in the project">
        <constraints nullable="false"/>
      </column>
    </addColumn>
  </changeSet>

  <changeSet id="tm-1.21.0-rename-can_run_gherkin-column" author="jlor">
    <comment>Rename CAN_RUN_GHERKIN column to CAN_RUN_SCRIPT</comment>
    <renameColumn tableName="TEST_AUTOMATION_PROJECT" oldColumnName="CAN_RUN_GHERKIN" newColumnName="CAN_RUN_SCRIPT" columnDataType="BOOLEAN" />
  </changeSet>

  <changeSet id="tm-1.21.0-TM-211-last-sync-date" author="amk">

    <comment>add new column LAST-SYNC-DATE into REMOTE_AUTOMATION_REQUEST_EXTENDER</comment>

    <addColumn tableName="REMOTE_AUTOMATION_REQUEST_EXTENDER">
      <column name="LAST_SYNC_DATE" type="DATETIME" defaultValue="NULL"  remarks="Date of the last synchronisation." >
      </column>
    </addColumn>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-725-add-committer-mail-in-scm-server" author="jlor">

    <comment>Add column COMMITTER_MAIL in SCM_SERVER</comment>

    <addColumn tableName="SCM_SERVER">
      <column name="COMMITTER_MAIL" type="VARCHAR(255)" defaultValue="">
        <constraints nullable="false" />
      </column>
    </addColumn>

  </changeSet>
  
  <changeSet id="tm-1.21.0-TM-713-add-axis_and_measure-to-execution_is_auto" author="abo">

    <sql>
      INSERT INTO CHART_COLUMN_ROLE (CHART_COLUMN_ID, ROLE) values ((SELECT QUERY_COLUMN_ID FROM QUERY_COLUMN_PROTOTYPE WHERE QUERY_COLUMN_PROTOTYPE.LABEL = 'EXECUTION_ISAUTO'), 'MEASURE'),
      ((SELECT QUERY_COLUMN_ID FROM QUERY_COLUMN_PROTOTYPE WHERE QUERY_COLUMN_PROTOTYPE.LABEL = 'EXECUTION_ISAUTO'), 'AXIS');
    </sql>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-211-sent-value-for-sync" author="amk">

    <comment>add new column SENT_VALUE_FOR_SYNC into REMOTE_AUTOMATION_REQUEST_EXTENDER</comment>

    <addColumn tableName="REMOTE_AUTOMATION_REQUEST_EXTENDER">
      <column name="SENT_VALUE_FOR_SYNC" type="CLOB" defaultValue="NULL"  remarks="The values ​​of the test case fields sent during synchronization." >
      </column>
    </addColumn>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-916-918-synchronizable-issue-status" author="amk">

    <comment>add new column SYNCHRONIZABLE_ISSUE_STATUS into REMOTE_AUTOMATION_REQUEST_EXTENDER</comment>

    <addColumn tableName="REMOTE_AUTOMATION_REQUEST_EXTENDER">
      <column name="SYNCHRONIZABLE_ISSUE_STATUS" type="VARCHAR(25)" remarks="this column can be set to: TO SYNCHRONIZE, DELETED, MOVED_PROJECT and MOVED_ISSUE_TYPE ; and it is updated after each synchronization." >
      </column>
    </addColumn>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-875-last-sync-date-squash" author="amk">

    <comment>add new column LAST-SYNC-DATE into REMOTE_AUTOMATION_REQUEST_EXTENDER</comment>

    <addColumn tableName="REMOTE_AUTOMATION_REQUEST_EXTENDER">
      <column name="LAST_SYNC_DATE_SQUASH" type="DATETIME" defaultValue="NULL"  remarks="Date of the last synchronisation squash to remote server." >
      </column>
    </addColumn>

  </changeSet>

  <changeSet id="tm-1.21.0-TM-846.1-mysql" author="jlor" dbms="mysql">

    <comment>MySQL - Add unique constraint on order column for iterations in campaign</comment>

    <sql>
      <![CDATA[
        drop table if exists CAMPAIGN_ITERATION_TMP;

        create table CAMPAIGN_ITERATION_TMP
          (select
            CAMPAIGN_ID,
            ITERATION_ID,
            min(ITERATION_ORDER) ITERATION_ORDER
          from CAMPAIGN_ITERATION
          group by CAMPAIGN_ID, ITERATION_ID);

        create index idx1 on CAMPAIGN_ITERATION_TMP(CAMPAIGN_ID, ITERATION_ID);

        update CAMPAIGN_ITERATION_TMP t1,
          (select
            CAMPAIGN_ID,
            ITERATION_ID,
            (select count(*)
            from CAMPAIGN_ITERATION_TMP b
            where a.CAMPAIGN_ID = b.CAMPAIGN_ID
            and a.ITERATION_ORDER >= b.ITERATION_ORDER) line
          from CAMPAIGN_ITERATION_TMP a) t2
        set ITERATION_ORDER = t2.line - 1
        where t1.CAMPAIGN_ID = t2.CAMPAIGN_ID
        and t1.ITERATION_ID = t2.ITERATION_ID;

        truncate table CAMPAIGN_ITERATION;

        insert into CAMPAIGN_ITERATION
        select
          a.CAMPAIGN_ID,
          a.ITERATION_ID,
          a.ITERATION_ORDER + 1 - (select count(*)
                              from CAMPAIGN_ITERATION_TMP b
                              where a.CAMPAIGN_ID = b.CAMPAIGN_ID
                              and a.ITERATION_ORDER = b.ITERATION_ORDER
                              and a.ITERATION_ID <= b.ITERATION_ID
                              group by
                                b.CAMPAIGN_ID,
                                b.ITERATION_ORDER) ITERATION_ORDER
          from CAMPAIGN_ITERATION_TMP a;

        drop table CAMPAIGN_ITERATION_TMP;
      ]]>
    </sql>

    <addUniqueConstraint tableName="CAMPAIGN_ITERATION" columnNames="CAMPAIGN_ID, ITERATION_ORDER" />

  </changeSet>

  <changeSet id="tm-1.21.0-TM-846.2-mysql" author="jlor" dbms="mysql">

    <comment>MySQL - Add unique constraint on order column for executions in itpi</comment>

    <sql>
      <![CDATA[
        drop table if exists ITEM_TEST_PLAN_EXECUTION_TMP;

        create table ITEM_TEST_PLAN_EXECUTION_TMP
          (select
            ITEM_TEST_PLAN_ID,
            EXECUTION_ID,
            min(EXECUTION_ORDER) EXECUTION_ORDER
          from ITEM_TEST_PLAN_EXECUTION
          group by ITEM_TEST_PLAN_ID, EXECUTION_ID);

        create index idx1 on ITEM_TEST_PLAN_EXECUTION_TMP(ITEM_TEST_PLAN_ID, EXECUTION_ID);

        update ITEM_TEST_PLAN_EXECUTION_TMP t1,
          (select
            ITEM_TEST_PLAN_ID,
            EXECUTION_ID,
            (select count(*)
            from ITEM_TEST_PLAN_EXECUTION_TMP b
            where a.ITEM_TEST_PLAN_ID = b.ITEM_TEST_PLAN_ID
            and a.EXECUTION_ORDER >= b.EXECUTION_ORDER) line
          from ITEM_TEST_PLAN_EXECUTION_TMP a) t2
        set EXECUTION_ORDER = t2.line - 1
        where t1.ITEM_TEST_PLAN_ID = t2.ITEM_TEST_PLAN_ID
        and t1.EXECUTION_ID = t2.EXECUTION_ID;

        truncate table ITEM_TEST_PLAN_EXECUTION;

        insert into ITEM_TEST_PLAN_EXECUTION
        select
          a.ITEM_TEST_PLAN_ID,
          a.EXECUTION_ID,
          a.EXECUTION_ORDER + 1 - (select count(*)
                              from ITEM_TEST_PLAN_EXECUTION_TMP b
                              where a.ITEM_TEST_PLAN_ID = b.ITEM_TEST_PLAN_ID
                              and a.EXECUTION_ORDER = b.EXECUTION_ORDER
                              and a.EXECUTION_ID <= b.EXECUTION_ID
                              group by
                                b.ITEM_TEST_PLAN_ID,
                                b.EXECUTION_ORDER) EXECUTION_ORDER
          from ITEM_TEST_PLAN_EXECUTION_TMP a;

        drop table ITEM_TEST_PLAN_EXECUTION_TMP;
      ]]>
    </sql>

    <addUniqueConstraint tableName="ITEM_TEST_PLAN_EXECUTION" columnNames="ITEM_TEST_PLAN_ID, EXECUTION_ORDER" />

  </changeSet>

  <changeSet id="tm-1.21.0-TM-846.3-mysql" author="jlor" dbms="mysql">

    <comment>MySQL - Add unique constraint on order column for steps in execution</comment>

    <sql>
      <![CDATA[
        drop table if exists EXECUTION_EXECUTION_STEPS_TMP;

        create table EXECUTION_EXECUTION_STEPS_TMP
          (select
            EXECUTION_ID,
            EXECUTION_STEP_ID,
            min(EXECUTION_STEP_ORDER) STEP_ORDER
          from EXECUTION_EXECUTION_STEPS
          group by EXECUTION_ID, EXECUTION_STEP_ID);

        create index idx1 on EXECUTION_EXECUTION_STEPS_TMP(EXECUTION_ID, EXECUTION_STEP_ID);

        update EXECUTION_EXECUTION_STEPS_TMP t1,
          (select
            EXECUTION_ID,
            EXECUTION_STEP_ID,
            (select count(*)
            from EXECUTION_EXECUTION_STEPS_TMP b
            where a.EXECUTION_ID = b.EXECUTION_ID
            and a.STEP_ORDER >= b.STEP_ORDER) line
          from EXECUTION_EXECUTION_STEPS_TMP a) t2
        set STEP_ORDER = t2.line - 1
        where t1.EXECUTION_ID = t2.EXECUTION_ID
        and t1.EXECUTION_STEP_ID = t2.EXECUTION_STEP_ID;

        truncate table EXECUTION_EXECUTION_STEPS;

        insert into EXECUTION_EXECUTION_STEPS
        select
          a.EXECUTION_ID,
          a.EXECUTION_STEP_ID,
          a.STEP_ORDER + 1 - (select count(*)
                              from EXECUTION_EXECUTION_STEPS_TMP b
                              where a.EXECUTION_ID = b.EXECUTION_ID
                              and a.STEP_ORDER = b.STEP_ORDER
                              and a.EXECUTION_STEP_ID <= b.EXECUTION_STEP_ID
                              group by
                                b.EXECUTION_ID,
                                b.STEP_ORDER) STEP_ORDER
          from EXECUTION_EXECUTION_STEPS_TMP a;

        drop table EXECUTION_EXECUTION_STEPS_TMP;
      ]]>
    </sql>

    <addUniqueConstraint tableName="EXECUTION_EXECUTION_STEPS" columnNames="EXECUTION_ID, EXECUTION_STEP_ORDER" />

  </changeSet>

  <changeSet id="tm-1.21.0-TM-846.1-postgresql" author="jlor" dbms="postgresql">

    <comment>PostgreSQL - Add unique constraint on order column for iterations in campaign</comment>

    <sql>
      <![CDATA[
        drop table if exists CAMPAIGN_ITERATION_TMP;

        create table CAMPAIGN_ITERATION_TMP AS
          (select
            CAMPAIGN_ID,
            ITERATION_ID,
            min(ITERATION_ORDER) ITERATION_ORDER
          from CAMPAIGN_ITERATION
          group by CAMPAIGN_ID, ITERATION_ID);

        create index idx1 on CAMPAIGN_ITERATION_TMP(CAMPAIGN_ID, ITERATION_ID);

        update CAMPAIGN_ITERATION_TMP t1
        set ITERATION_ORDER = t2.line - 1
        from (
          select
            CAMPAIGN_ID,
            ITERATION_ID,
            (select count(*)
            from CAMPAIGN_ITERATION_TMP b
            where a.CAMPAIGN_ID = b.CAMPAIGN_ID
            and a.ITERATION_ORDER >= b.ITERATION_ORDER) line
          from CAMPAIGN_ITERATION_TMP a) t2
          where t1.CAMPAIGN_ID = t2.CAMPAIGN_ID
          and t1.ITERATION_ID = t2.ITERATION_ID;

        truncate table CAMPAIGN_ITERATION;

        insert into CAMPAIGN_ITERATION
        select
          a.CAMPAIGN_ID,
          a.ITERATION_ID,
          a.ITERATION_ORDER + 1 - (select count(*)
                              from CAMPAIGN_ITERATION_TMP b
                              where a.CAMPAIGN_ID = b.CAMPAIGN_ID
                              and a.ITERATION_ORDER = b.ITERATION_ORDER
                              and a.ITERATION_ID <= b.ITERATION_ID
                              group by
                                b.CAMPAIGN_ID,
                                b.ITERATION_ORDER) ITERATION_ORDER
          from CAMPAIGN_ITERATION_TMP a;

        drop table CAMPAIGN_ITERATION_TMP;
      ]]>
    </sql>

    <addUniqueConstraint tableName="CAMPAIGN_ITERATION" columnNames="CAMPAIGN_ID, ITERATION_ORDER" />

  </changeSet>

  <changeSet id="tm-1.21.0-TM-846.2-postgresql" author="jlor" dbms="postgresql">

    <comment>PostgreSQL - Add unique constraint on order column for executions in itpi</comment>

    <sql>
      <![CDATA[
        drop table if exists ITEM_TEST_PLAN_EXECUTION_TMP;

        create table ITEM_TEST_PLAN_EXECUTION_TMP AS
          (select
            ITEM_TEST_PLAN_ID,
            EXECUTION_ID,
            min(EXECUTION_ORDER) EXECUTION_ORDER
          from ITEM_TEST_PLAN_EXECUTION
          group by ITEM_TEST_PLAN_ID, EXECUTION_ID);

        create index idx1 on ITEM_TEST_PLAN_EXECUTION_TMP(ITEM_TEST_PLAN_ID, EXECUTION_ID);

        update ITEM_TEST_PLAN_EXECUTION_TMP t1
        set EXECUTION_ORDER = t2.line - 1
        from (
          select
            ITEM_TEST_PLAN_ID,
            EXECUTION_ID,
            (select count(*)
            from ITEM_TEST_PLAN_EXECUTION_TMP b
            where a.ITEM_TEST_PLAN_ID = b.ITEM_TEST_PLAN_ID
            and a.EXECUTION_ORDER >= b.EXECUTION_ORDER) line
          from ITEM_TEST_PLAN_EXECUTION_TMP a) t2
          where t1.ITEM_TEST_PLAN_ID = t2.ITEM_TEST_PLAN_ID
          and t1.EXECUTION_ID = t2.EXECUTION_ID;

        truncate table ITEM_TEST_PLAN_EXECUTION;

        insert into ITEM_TEST_PLAN_EXECUTION
        select
          a.ITEM_TEST_PLAN_ID,
          a.EXECUTION_ID,
          a.EXECUTION_ORDER + 1 - (select count(*)
                              from ITEM_TEST_PLAN_EXECUTION_TMP b
                              where a.ITEM_TEST_PLAN_ID = b.ITEM_TEST_PLAN_ID
                              and a.EXECUTION_ORDER = b.EXECUTION_ORDER
                              and a.EXECUTION_ID <= b.EXECUTION_ID
                              group by
                                b.ITEM_TEST_PLAN_ID,
                                b.EXECUTION_ORDER) EXECUTION_ORDER
          from ITEM_TEST_PLAN_EXECUTION_TMP a;

        drop table ITEM_TEST_PLAN_EXECUTION_TMP;
      ]]>
    </sql>

    <addUniqueConstraint tableName="ITEM_TEST_PLAN_EXECUTION" columnNames="ITEM_TEST_PLAN_ID, EXECUTION_ORDER" />

  </changeSet>

  <changeSet id="tm-1.21.0-TM-846.3-postgresql" author="jlor" dbms="postgresql">

    <comment>PostgreSQL - Add unique constraint on order column for steps in execution</comment>

    <sql>
      <![CDATA[
        drop table if exists EXECUTION_EXECUTION_STEPS_TMP;

        create table EXECUTION_EXECUTION_STEPS_TMP AS
          (select
            EXECUTION_ID,
            EXECUTION_STEP_ID,
            min(EXECUTION_STEP_ORDER) STEP_ORDER
          from EXECUTION_EXECUTION_STEPS
          group by EXECUTION_ID, EXECUTION_STEP_ID);

        create index idx1 on EXECUTION_EXECUTION_STEPS_TMP(EXECUTION_ID, EXECUTION_STEP_ID);

        update EXECUTION_EXECUTION_STEPS_TMP t1
        set STEP_ORDER = t2.line - 1
        from (
          select
            EXECUTION_ID,
            EXECUTION_STEP_ID,
            (select count(*)
            from EXECUTION_EXECUTION_STEPS_TMP b
            where a.EXECUTION_ID = b.EXECUTION_ID
            and a.STEP_ORDER >= b.STEP_ORDER) line
          from EXECUTION_EXECUTION_STEPS_TMP a) t2
          where t1.EXECUTION_ID = t2.EXECUTION_ID
          and t1.EXECUTION_STEP_ID = t2.EXECUTION_STEP_ID;

        truncate table EXECUTION_EXECUTION_STEPS;

        insert into EXECUTION_EXECUTION_STEPS
        select
          a.EXECUTION_ID,
          a.EXECUTION_STEP_ID,
          a.STEP_ORDER + 1 - (select count(*)
                              from EXECUTION_EXECUTION_STEPS_TMP b
                              where a.EXECUTION_ID = b.EXECUTION_ID
                              and a.STEP_ORDER = b.STEP_ORDER
                              and a.EXECUTION_STEP_ID <= b.EXECUTION_STEP_ID
                              group by
                                b.EXECUTION_ID,
                                b.STEP_ORDER) STEP_ORDER
          from EXECUTION_EXECUTION_STEPS_TMP a;

        drop table EXECUTION_EXECUTION_STEPS_TMP;
      ]]>
    </sql>

    <addUniqueConstraint tableName="EXECUTION_EXECUTION_STEPS" columnNames="EXECUTION_ID, EXECUTION_STEP_ORDER" />

  </changeSet>

</databaseChangeLog>
